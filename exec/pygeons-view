#!/usr/bin/env python
import argparse
import logging
from pygeons import *

p = argparse.ArgumentParser(
  description='''Runs the PyGeoNS Interactive Viewer''')

p.add_argument(
  'input_files',type=str,nargs='+',metavar='STR',
   help='''date files. These must be HDF5 files''')

p.add_argument(
  '-v','--verbose',action='count',default=0,
  help='''controls verbosity''')
  
p.add_argument('--data_set_labels',nargs='+',type=str,metavar='STR')
p.add_argument('--color_cycle',nargs='+',type=str,metavar='STR')
p.add_argument('--resolution',type=str,metavar='STR')               
p.add_argument('--quiver_scale',type=float,metavar='FLOAT')
p.add_argument('--quiver_key_length',type=float,metavar='FLOAT')
p.add_argument('--quiver_key_pos',nargs=2,type=float,metavar='FLOAT')
p.add_argument('--scatter_show',type=bool,metavar='BOOL')
p.add_argument('--scatter_size',type=float,metavar='BOOL')
p.add_argument('--image_clim',nargs=2,type=float,metavar='FLOAT')
p.add_argument('--image_cmap',type=str,metavar='STR')
p.add_argument('--image_array_size',type=int,metavar='INT')
p.add_argument('--ts_title',type=str,metavar='STR')
p.add_argument('--map_title',type=str,metavar='STR')
p.add_argument('--map_xlim',nargs=2,type=float,metavar='FLOAT')
p.add_argument('--map_ylim',nargs=2,type=float,metavar='FLOAT')
p.add_argument('--fontsize',type=float,metavar='FLOAT')
p.add_argument(
  '--break_lons',nargs='+',type=float,metavar='FLOAT',
  help='''Longitudes of the spatial discontinuity vertices''')

p.add_argument(
  '--break_lats',nargs='+',type=float,metavar='FLOAT',
  help='''Latitudes of the spatial discontinuity vertices''')

p.add_argument(
  '--break_conn',nargs='+',type=str,metavar='STR',
  help='''Connectivity of the spatial discontinuity vertices. This can 
          be one or multiple strings where each string contains the 
          vertex indices making up each discontinuity separated by a 
          '-'. For example, '0-1-2 3-4' indicates that there are two 
          discontinuties, one contains vertices 0, 1, and 2 and the 
          other contains vertices 3 and 4''')
               
p = vars(p.parse_args())

# set logger
verbose = p.pop('verbose')
if verbose == 0:
  logging.basicConfig(level=logging.WARNING)
elif verbose == 1:
  logging.basicConfig(level=logging.INFO)
else:
  logging.basicConfig(level=logging.DEBUG)

input_files = p.pop('input_files')
data_dicts = [dict_from_hdf5(i) for i in input_files]

# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys(): 
  if p[k] is None: 
    p.pop(k)

pygeons_view(data_dicts,**p)
