#!/usr/bin/env python
import argparse
import json
import sys
import pygeons.ioconv
import pygeons.interface
import logging

p = argparse.ArgumentParser()
p.add_argument('input_files',type=str,nargs='+',
               help='''date files. Can either be a PBO csv file, a PBO 
                       pos file, or a HDF5 file. The file type is 
                       inferred from the extension. ".hdf", ".h5", 
                       ".hdf5", ".he5" are interpretted as HDF5, 
                       ".pos" is interpretted as PBO pos, anything 
                       else is assumed to be a PBO csv file.''')
p.add_argument('-v','--verbose',action='count',default=0,
               help='''controls verbosity''')
p.add_argument('--data_set_names',nargs='+',type=str)
p.add_argument('--color_cycle',nargs='+',type=str)
p.add_argument('--resolution',type=str)               
p.add_argument('--quiver_key_label',type=str)
p.add_argument('--quiver_key_length',type=float)
p.add_argument('--quiver_scale',type=float)
p.add_argument('--quiver_width',type=float)
p.add_argument('--quiver_key_pos',nargs=2,type=float)
p.add_argument('--scatter_show',type=bool)
p.add_argument('--scatter_size',type=float)
p.add_argument('--image_clim',nargs=2,type=float)
p.add_argument('--image_cmap',type=str)
p.add_argument('--image_array_size',type=int)
p.add_argument('--image_clabel',type=str)
p.add_argument('--ts_xlabel',type=str)
p.add_argument('--ts_ylabel_0',type=str)
p.add_argument('--ts_ylabel_1',type=str)
p.add_argument('--ts_ylabel_2',type=str)
p.add_argument('--ts_title',type=str)
p.add_argument('--map_title',type=str)
p.add_argument('--map_xlim',nargs=2,type=float)
p.add_argument('--map_ylim',nargs=2,type=float)
p.add_argument('--fontsize',type=float)
p.add_argument('--cut_endpoint1_lons',nargs='+',type=float)
p.add_argument('--cut_endpoint1_lats',nargs='+',type=float)
p.add_argument('--cut_endpoint2_lons',nargs='+',type=float)
p.add_argument('--cut_endpoint2_lats',nargs='+',type=float)
               
p = vars(p.parse_args())

# set logger
verbose = p.pop('verbose')
if verbose == 0:
  logging.basicConfig(level=logging.WARNING)
elif verbose == 1:
  logging.basicConfig(level=logging.INFO)
else:
  logging.basicConfig(level=logging.DEBUG)

input_files = p.pop('input_files')
data_dicts = [pygeons.ioconv.dict_from_file(i) for i in input_files]

# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys(): 
  if p[k] is None: 
    p.pop(k)

pygeons.interface.view(data_dicts,**p)
