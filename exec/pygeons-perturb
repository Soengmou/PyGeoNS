#!/usr/bin/env python
import argparse
import json
import sys
import os
import shutil
import pygeons.ioconv
import pygeons.interface
import logging

def get_extension(f):
  return f.split('.')[-1]

def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser()
p.add_argument('input_file',type=str,
               help='''input date file. Can either be a PBO csv file, a PBO 
                       pos file, or a HDF5 file. The file type is 
                       inferred from the extension. ".hdf", ".h5", 
                       ".hdf5", ".he5" are interpretted as HDF5, 
                       ".pos" is interpretted as PBO pos, anything 
                       else is assumed to be a PBO csv file.''')
p.add_argument('N',type=int)
p.add_argument('-v','--verbose',action='count',default=0,
               help='''controls verbosity''')
               
p = vars(p.parse_args())

# set logger
verbose = p.pop('verbose')
if verbose == 0:
  logging.basicConfig(level=logging.WARNING)
elif verbose == 1:
  logging.basicConfig(level=logging.INFO)
else:
  logging.basicConfig(level=logging.DEBUG)

input_file = p.pop('input_file')

# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

data_dict = pygeons.ioconv.dict_from_file(input_file)
out_dict_lst = pygeons.interface.perturb(data_dict,**p)

# save to file with the same extension
ext = get_extension(input_file)
pert_dir = input_file+'.pert'
if os.path.exists(pert_dir):
  shutil.rmtree(pert_dir)

os.mkdir(pert_dir)

for idx,out_dict in enumerate(out_dict_lst):
  file_name = pert_dir + '/%s.%s' % (idx,ext)
  pygeons.ioconv.file_from_dict(file_name,out_dict)
