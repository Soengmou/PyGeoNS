#!/usr/bin/env python
import argparse
import logging
from pygeons import *

def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser(
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
''' 
Temporally smooths or differentiates the dataset with Gaussian process 
regression. The user must specify two distribution parameters for the 
prior Gaussian process. The first is the variance of the prior 
Gaussian process, and the second is the characteristic time scale, 
which controls the temporal covariance. The user may also specify the 
order of the polynomial null space, which is described below.

Details
-------
It is assumed, a priori, that the underlying function from which the 
data is being sampled can be described as

u(t) = g(t) + p(t), 

where p(t) is a random function that is equally likely to be any 
polynomial of the user specified degree,

g ~ Normal( 0 , cov(t1,t2) ),

and

cov(t1,t2) = sigma*exp(-(||t1 - t2||/cls)**2).

*sigma* and *cls* are the two prior distribution parameters that the 
user must specify. This function combines the a priori assumption with 
the observations in the input file to create a continuous, 
analytically differentiable, posterior estimate of the vector field. 
The a priori assumptions will have a significant influence on the 
resulting data set, and it is therefor important that the user 
believes that the prior is sensible.  To help gauge the sensibility of 
the prior, it is possible to use this function to output samples of 
the prior, ignoring the input data set. This can be done by raising 
the *do_not_condition* and *return_sample* flag.

'''
)
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('sigma',**GLOSSARY['sigma'])
p.add_argument('cls',**GLOSSARY['t_cls'])
p.add_argument('--order',**GLOSSARY['order'])
p.add_argument('--fill',**GLOSSARY['fill'])
p.add_argument('--diff',**GLOSSARY['t_diff'])
p.add_argument('--procs',**GLOSSARY['procs'])
p.add_argument('-c','--do_not_condition',**GLOSSARY['do_not_condition'])
p.add_argument('-s','--return_sample',**GLOSSARY['return_sample'])
p.add_argument('-a','--start_date',**GLOSSARY['start_date'])
p.add_argument('-b','--stop_date',**GLOSSARY['stop_date'])
p.add_argument('-o','--output_file',**GLOSSARY['output_file'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p = vars(p.parse_args())

verbose = p.pop('verbose')
logging.basicConfig(level=30-10*verbose)
input_file = p.pop('input_file')
output_file = p.pop('output_file')
# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

if output_file is None:
  output_file = change_extension(input_file,'tgpr.h5')

data_dict = dict_from_hdf5(input_file)
out_dict = pygeons_tgpr(data_dict,**p)
hdf5_from_dict(output_file,out_dict)
