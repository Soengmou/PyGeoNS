#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import logging
from pygeons import *

def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser(
  usage='%(prog)s STR FLOAT FLOAT [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Temporally smoothes or differentiates a displacement dataset. It is
assumed that each displacement timeseries can be described as the sum
of:

  (1) a Gaussian process with zero mean, and a squared-exponential
      covariance function, 

        cov(t,t') = a² exp(-|t - t'|²/b²),
      
      where *a* and *b* are user-specified hyper-parameters
      controlling the standard deviation and the characteristic
      time-scale, respectively.
  
  (2) an unknown polynomial with a user specified order.
  
  (3) sinusoids with annual and semiannual frequencies and unknown
      amplitudes.
  
  (4) a Gaussian process with zero mean, and an exponential covariance
      function, 
      
        cov(t,t') = c²/(4 π d) exp(-2 π d |t - t'|),

      where *c* and *d* are user-specified hyperparameters. This is
      often referred to as an Ornstein-Uhlenbeck process or a
      first-order Gauss-Markov (FOGM) process. *c* can be interpretted
      as the standard deviation of the white noise driving the FOGM
      process, and *b* can be interpretted as a cutoff frequency.
  
  (5) Uncorrelated noise described by the formal data uncertainties.    
  
We consider (1) and (2) to be signal, and the remaining terms are
considered noise. This function requires the user to specify the name
of the data file and the two hyperparameters for (1).
'''
)
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('prior',**GLOSSARY['t_prior'])
p.add_argument('--order',**GLOSSARY['order'])
p.add_argument('--diff',**GLOSSARY['t_diff'])
p.add_argument('--fogm',**GLOSSARY['fogm'])
p.add_argument('--procs',**GLOSSARY['procs'])
p.add_argument('--no_annual',**GLOSSARY['no_annual'])
p.add_argument('--no_semiannual',**GLOSSARY['no_semiannual'])
p.add_argument('-t','--outlier_tol',**GLOSSARY['outlier_tol'])
p.add_argument('-s','--return_sample',**GLOSSARY['return_sample'])
p.add_argument('-a','--start_date',**GLOSSARY['start_date'])
p.add_argument('-b','--stop_date',**GLOSSARY['stop_date'])
p.add_argument('-o','--output_file',**GLOSSARY['output_file'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p = vars(p.parse_args())

verbose = p.pop('verbose')
logging.basicConfig(level=30-10*verbose)
input_file = p.pop('input_file')
output_file = p.pop('output_file')
# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

if output_file is None:
  output_file = change_extension(input_file,'tgpr.h5')

data_dict = dict_from_hdf5(input_file)
out_dict = pygeons_tgpr(data_dict,**p)
hdf5_from_dict(output_file,out_dict)
