#!/usr/bin/env python
import argparse
import logging
from pygeons import *

def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser(
   formatter_class=argparse.RawDescriptionHelpFormatter,
   description=
''' 
Spatially filters the data set

'''
)

p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('-o','--output_file',**GLOSSARY['output_file'])
p.add_argument('--cutoff',**GLOSSARY['s_cutoff'])
p.add_argument('--diff',**GLOSSARY['s_diff'])
p.add_argument('--procs',**GLOSSARY['procs'])
p.add_argument('--samples',**GLOSSARY['samples'])
p.add_argument('--n',**GLOSSARY['n'])
p.add_argument('-f','--fill',**GLOSSARY['fill'])
p.add_argument('--break_lons',**GLOSSARY['break_lons'])
p.add_argument('--break_lats',**GLOSSARY['break_lats'])
p.add_argument('--break_conn',**GLOSSARY['break_conn'])
p.add_argument('--use_pinv',**GLOSSARY['use_pinv'])
p.add_argument('--check_all_edges',**GLOSSARY['check_all_edges'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p = vars(p.parse_args())

# set logger
verbose = p.pop('verbose')
logging.basicConfig(level=30-10*verbose)
input_file = p.pop('input_file')
output_file = p.pop('output_file')
# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

if output_file is None:
  output_file = change_extension(input_file,'sfilter.h5')

data_dict = dict_from_hdf5(input_file)
out_dict = pygeons_sfilter(data_dict,**p)
hdf5_from_dict(output_file,out_dict)
