#!/usr/bin/env python
import argparse
import logging
from pygeons import *

def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser(
   description='''Spatially filters the data set''')

p.add_argument(
  'input_file',type=str,metavar='STR',
  help='''Input data file. This must be an HDF5 file''')

p.add_argument(
  '-o','--output_file',type=str,metavar='STR',
  help='''Output file name. If this is not provided then it is the 
          same as the input file name but the extension is removed 
          and replaced with "sfilter.h5"''')

p.add_argument(
  '--cutoff',type=float,metavar='FLOAT',
  help='''Spatial cutoff frequency in 1/meters''')

p.add_argument(
  '--diff',type=int,nargs=2,metavar='INT',
   help='''If provided, then the specified spatial derivative of the 
           filtered solution is returned. The derivative is specified 
           with two integers, where the first is the derivative order
           in the east direction and the second is the derivative 
           order in the north direction.''')

p.add_argument(
  '--procs',type=int,metavar='INT',
  help='''Number of processes to use''')

p.add_argument(
  '--samples',type=int,metavar='INT',
  help='''Number of random samples to use for estimating the 
          uncertainty.''')

p.add_argument(
  '--n',type=int,metavar='INT',
  help='''Stencil size''')

p.add_argument(
  '-f','--fill',type=str,metavar='STR',
  help='''Indicates how to handle missing data (i.e. data with inf 
          uncertainty). Can either be 'none', where missing data is 
          ignored, 'interpolate' where missing interior data is filled
          in, or 'extrapolate' where all missing data is filled in.''')               

p.add_argument(
  '--break_lons',nargs='+',type=float,metavar='FLOAT',
  help='''Longitudes of the spatial discontinuity vertices''')

p.add_argument(
  '--break_lats',nargs='+',type=float,metavar='FLOAT',
  help='''Latitudes of the spatial discontinuity vertices''')

p.add_argument(
  '--break_conn',nargs='+',type=str,metavar='STR', 
  help='''Connectivity of the spatial discontinuity vertices. This can 
          be one or multiple strings where each string contains the 
          vertex indices making up each discontinuity separated by a 
          '-'. For example, '0-1-2 3-4' indicates that there are two 
          discontinuties, one contains vertices 0, 1, and 2 and the 
          other contains vertices 3 and 4''')

p.add_argument(
  '-p','--use_pinv',action='store_true',
  help='''Computes RBF-FD weights with a pseudo-inversion. This 
          should be used when there may be duplicate stations''')

p.add_argument(
  '-c','--check_all_edges',action='store_true',
  help='''Enforces that no stencil contains stations which form an 
          edge that crosses the boundary''')

p.add_argument(
  '-v','--verbose',action='count',default=0,
  help='''Controls verbosity''')
               
p = vars(p.parse_args())

# set logger
verbose = p.pop('verbose')
if verbose == 0:
  logging.basicConfig(level=logging.WARNING)
elif verbose == 1:
  logging.basicConfig(level=logging.INFO)
else:
  logging.basicConfig(level=logging.DEBUG)

input_file = p.pop('input_file')
output_file = p.pop('output_file')

# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

if output_file is None:
  output_file = change_extension(input_file,'sfilter.h5')

data_dict = dict_from_hdf5(input_file)
out_dict = pygeons_sfilter(data_dict,**p)
hdf5_from_dict(output_file,out_dict)
