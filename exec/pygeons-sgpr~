#!/usr/bin/env python
import argparse
import logging
from pygeons import *

def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser(
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
''' 

Spatially filters the data set with Gaussian process regression.

'''
)
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('sigma',**GLOSSARY['sigma'])
p.add_argument('cls',**GLOSSARY['s_cls'])
p.add_argument('--order',**GLOSSARY['order'])
p.add_argument('--fill',**GLOSSARY['fill'])
p.add_argument('--diff',**GLOSSARY['s_diff'])
p.add_argument('--procs',**GLOSSARY['procs'])
p.add_argument('-p','--output_positions',**GLOSSARY['output_positions'])
p.add_argument('-o','--output_file',**GLOSSARY['output_file'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p = vars(p.parse_args())

verbose = p.pop('verbose')
logging.basicConfig(level=30-10*verbose)
input_file = p.pop('input_file')
output_file = p.pop('output_file')
# swap output_lonlat from a file name to a numpy array
if p['output_positions'] is not None:
  p['output_positions'] = np.loadtxt(p['output_positions'],dtype=float)
  
# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

if output_file is None:
  output_file = change_extension(input_file,'sgpr.h5')

data_dict = dict_from_hdf5(input_file)
out_dict = pygeons_sgpr(data_dict,**p)
hdf5_from_dict(output_file,out_dict)
