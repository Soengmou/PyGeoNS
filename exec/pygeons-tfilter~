#!/usr/bin/env python
import argparse
import json
import sys
import os
import pygeons.ioconv
import pygeons.interface
import logging

def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser(
  description='''Temporally filters the data set''')

p.add_argument(
  'input_file',type=str,metavar='STR',
   help='''Input data file. This must be an HDF5 file''')

p.add_argument(
  '-o','--output_file',type=str,metavar='STR',
  help='''Output file name. If this is not provided then it is the  
          same as the input file name but the extension is removed 
          and replaced with "tfilter.h5"''')

p.add_argument(
  '--cutoff',type=float,metavar='FLOAT',
  help='''Temporal cutoff frequency in 1/days''')

p.add_argument(
  '--diff',type=int,nargs=1,metavar='INT',
  help='''If provided, then the specified time derivative of the 
          filtered solution is returned.''')

p.add_argument(
  '--procs',type=int,metavar='INT',
  help='''Number of processes to use.''')

p.add_argument(
  '--samples',type=int,metavar='INT',
  help='''Number of random samples to use for estimating the 
          uncertainty''')

p.add_argument(
  '--size',type=int,metavar='INT',
  help='''Stencil Size''')

p.add_argument(
  '-f','--fill',type=str,metavar='STR',
  help='''Indicates how to handle missing data (i.e. data with inf 
          uncertainty). Can either be 'none', where missing data is 
          ignored, 'interpolate' where missing interior data is filled
          in, or 'extrapolate' where all missing data is filled in.''')               

p.add_argument(
  '--break_dates',nargs='+',type=str,metavar='STR',
  help='''List of time discontinuities in YYYY-MM-DD. This date should 
          be when the discontinuity is first observed''')

p.add_argument(
  '-v','--verbose',action='count',default=0,
  help='''Controls verbosity''')
               
p = vars(p.parse_args())

# set logger
verbose = p.pop('verbose')
if verbose == 0:
  logging.basicConfig(level=logging.WARNING)
elif verbose == 1:
  logging.basicConfig(level=logging.INFO)
else:
  logging.basicConfig(level=logging.DEBUG)

input_file = p.pop('input_file')
output_file = p.pop('output_file')

# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

if output_file is None:
  output_file = change_extension(input_file,'tfilter.h5')

data_dict = pygeons.ioconv.dict_from_hdf5(input_file)
out_dict = pygeons.interface.tfilter(data_dict,**p)
pygeons.ioconv.hdf5_from_dict(output_file,out_dict)
