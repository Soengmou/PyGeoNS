#!/usr/bin/env python
import argparse
import json
import sys
import os
import pygeons.ioconv
import pygeons.interface
import logging
  
def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser(
  description='''Downsamples the data set along the time axis''')
  
p.add_argument(
  'input_file',type=str,metavar='STR',
   help='''date file. This must be a HDF5 file'''

p.add_argument(
  '-o,--output_file',type=str,metavar='STR',
  help='''Output file name. If this is not provided then it is the 
          same as the input file name but the extension is removed 
          and replaced with "downsample.h5"''')

p.add_argument(
  '--sample_period',type=int,metavar='INT',
  help='''sample period in days''')

p.add_argument(
  '--start_date',type=str,metavar='STR',
  help='''resample start date in YYYY-MM-DD''')

p.add_argument(
  '--stop_date',type=str,metavar='STR',
  help='''resample stop date in YYYY-MM-DD''')

p.add_argument(
  '--cut_dates',nargs='+',type=str,metavar='STR',
  help='''list of time discontinuities in YYYY-MM-DD. This date 
          should be when the discontinuity is first observed''')

p.add_argument(
  '-v','--verbose',action='count',default=0,
  help='''controls verbosity''')
               
p = vars(p.parse_args())

# set logger
verbose = p.pop('verbose')
if verbose == 0:
  logging.basicConfig(level=logging.WARNING)
elif verbose == 1:
  logging.basicConfig(level=logging.INFO)
else:
  logging.basicConfig(level=logging.DEBUG)

input_file = p.pop('input_file')
output_file = p.pop('output_file')

# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

if output_file is None:
  output_file = change_extension(input_file,'downsample.h5')

data_dict = pygeons.ioconv.dict_from_hdf5(input_file)
out_dict = pygeons.interface.downsample(data_dict,**p)
pygeons.ioconv.hdf5_from_dict(output_file,out_dict)
