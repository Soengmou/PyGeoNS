#!/usr/bin/env python
import argparse
import json
import sys
import pygeons.ioconv
import pygeons.interface
import logging

p = argparse.ArgumentParser(
  description='''Runs the PyGeoNS Interactive Viewer''')

p.add_argument(
  'input_files',type=str,nargs='+',metavar='STR',
   help='''date files. These must be HDF5 files''')

p.add_argument(
  '-v','--verbose',action='count',default=0,
  help='''controls verbosity''')
  
p.add_argument('--data_set_names',nargs='+',type=str,metavar='STR')
p.add_argument('--color_cycle',nargs='+',type=str,metavar='STR')
p.add_argument('--resolution',type=str,metavar='STR')               
p.add_argument('--quiver_key_label',type=str,metavar='STR')
p.add_argument('--quiver_key_length',type=float,metavar='FLOAT')
p.add_argument('--quiver_scale',type=float,metavar='FLOAT')
p.add_argument('--quiver_width',type=float,metavar='FLOAT')
p.add_argument('--quiver_key_pos',nargs=2,type=float,metavar='FLOAT')
p.add_argument('--scatter_show',type=bool,metavar='BOOL')
p.add_argument('--scatter_size',type=float,metavar='BOOL')
p.add_argument('--image_clim',nargs=2,type=float,metavar='FLOAT')
p.add_argument('--image_cmap',type=str,metavar='STR')
p.add_argument('--image_array_size',type=int,metavar='INT')
p.add_argument('--image_clabel',type=str,metavar='STR')
p.add_argument('--ts_xlabel',type=str,metavar='STR')
p.add_argument('--ts_ylabel_0',type=str,metavar='STR')
p.add_argument('--ts_ylabel_1',type=str,metavar='STR')
p.add_argument('--ts_ylabel_2',type=str,metavar='STR')
p.add_argument('--ts_title',type=str,metavar='STR')
p.add_argument('--map_title',type=str,metavar='STR')
p.add_argument('--map_xlim',nargs=2,type=float,metavar='FLOAT')
p.add_argument('--map_ylim',nargs=2,type=float,metavar='FLOAT')
p.add_argument('--fontsize',type=float,metavar='FLOAT')
p.add_argument('--break_lons1',nargs='+',type=float,metavar='FLOAT')
p.add_argument('--break_lats1',nargs='+',type=float,metavar='FLOAT')
p.add_argument('--break_lons2',nargs='+',type=float,metavar='FLOAT')
p.add_argument('--break_lats2',nargs='+',type=float,metavar='FLOAT')
               
p = vars(p.parse_args())

# set logger
verbose = p.pop('verbose')
if verbose == 0:
  logging.basicConfig(level=logging.WARNING)
elif verbose == 1:
  logging.basicConfig(level=logging.INFO)
else:
  logging.basicConfig(level=logging.DEBUG)

input_files = p.pop('input_files')
data_dicts = [pygeons.ioconv.dict_from_hdf5(i) for i in input_files]

# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys(): 
  if p[k] is None: 
    p.pop(k)

pygeons.interface.view(data_dicts,**p)
