#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import logging
from pygeons import *

## MAIN PROGRAM
#####################################################################
# create the main PyGeoNS argument parser
main = argparse.ArgumentParser(
  usage='pygeons SUBCOMMAND ...',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''PyGeoNS (Python-based Geodetic Network Strain software) 

PyGeoNS is a command line application for identifying transient strain
in daily GPS displacement timeseries. The command which ultimately
carries out this task is 'pygeons strain'. The user will likely want
to first convert the data to an HDF5 format with 'pygeons toh5', crop
the data to a manageable size with 'pygeons crop', clean the data
automatically with 'pygeons autoclean' or manually with 'pygeons
clean', and view the data with 'pygeons vector-view'.

PyGeoNS identifies transient deformation in a Bayesian framework in
that the user must specify a prior stochastic process describing both
the signal and the noise. The signal is described as a
three-dimensional 'network' stochatic process (two spatial dimensions
and one time dimension). The noise can be described as a network
stochastic process or a 'station' stochastic process, which is noise
that is uncorrelated between stations. The hyperparameters for the
stochastic processes can be determined objectively with the Restricted
Maximum Likelihood (REML) method using the command 'pygeons reml'.

The transient deformation and transient strain returned by 'pygeons
strain' can be viewed with the commands 'pygeons vector-view' and
pygeons strain-view' respectively. See the README for a complete
demonstration of PyGeoNS.

PyGeoNS is developed by Trever Hines (hinest@umich.edu) and is
distributed under the MIT license. Please post bug reports, comments,
or suggestions at http://www.github.com/treverhines/PyGeoNS.''')
subs = main.add_subparsers(
  metavar='SUBCOMMAND',
  help=
'''PyGeoNS sub-command. This can be 'info', 'toh5', 'totext',
'vector-view', 'strain-view', 'clean', 'autoclean', 'crop', 'merge',
'strain', 'reml', or 'fit'. Call 'pygeons' followed by the sub-command
and '-h' to see more information.''')

## TOH5
#####################################################################
p = subs.add_parser('toh5',
  usage='pygeons toh5 STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Converts a text data file to an HDF5 file. The text file should
contain the content of each station file separated by three asterisks,
***. The station files can have one of three formats: the PBO csv
format, the PBO pos format, or the PyGeoNS csv format. Indicate the
file format by specifying either 'pbocsv', 'pbopos', or 'csv' for
*file_type*. See the README file or www.unavco.org for more
information on these file formats.

The resulting HDF5 file will contain data entries for each station in
the text file and for each day ranging from the earliest observation
to the latest. If data does not exist in the text file for a
particular station and day then it will be assigned a value of NaN
with INF uncertainty in the HDF5 file. This indicates that the data is
missing.''')

p.add_argument('input_text_file',**GLOSSARY['input_text_file'])
p.add_argument('-f','--file-type',**GLOSSARY['file_type'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_toh5)

# TOTEXT
#####################################################################
p = subs.add_parser('totext',
  usage='pygeons totext STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Converts an HDF5 data file to a text file. If a station is missing
data for each component, north, east, and vertical, for a particular
day, then that day will not be written to the text file. If all the
data for a station is missing then that station will not be included
in the resulting text file. The text file will have the PyGeoNS csv
format.''')
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_totext)

# INFO
#####################################################################
p = subs.add_parser('info',
  usage='pygeons info STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Prints metadata for an HDF5 data file to stdout.''')
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_info)

# VECTOR-VIEW
#####################################################################
p = subs.add_parser('vector-view',
  usage='pygeons vector-view STR [STR ...] [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Runs the PyGeoNS Interactive Vector Viewer. This function can take
multiple data files as arguments, which allows for side-by-side
comparison of datasets.''')
p.add_argument('input_files',**GLOSSARY['input_files'])
p.add_argument('--dataset-labels',**GLOSSARY['dataset_labels'])
p.add_argument('--colors',**GLOSSARY['colors'])
p.add_argument('--line-styles',**GLOSSARY['line_styles'])
p.add_argument('--error-styles',**GLOSSARY['error_styles'])
p.add_argument('--line-markers',**GLOSSARY['line_markers'])
p.add_argument('--quiver-scale',**GLOSSARY['quiver_scale'])
p.add_argument('--quiver-key-length',**GLOSSARY['quiver_key_length'])
p.add_argument('--quiver-key-pos',**GLOSSARY['quiver_key_pos'])
p.add_argument('--scatter-size',**GLOSSARY['scatter_size'])
p.add_argument('--image-clim',**GLOSSARY['image_clim'])
p.add_argument('--image-cmap',**GLOSSARY['image_cmap'])
p.add_argument('--image-resolution',**GLOSSARY['image_resolution'])
p.add_argument('--ts-title',**GLOSSARY['ts_title'])
p.add_argument('--map-resolution',**GLOSSARY['map_resolution'])
p.add_argument('--map-title',**GLOSSARY['map_title'])
p.add_argument('--map-xlim',**GLOSSARY['map_xlim'])
p.add_argument('--map-ylim',**GLOSSARY['map_ylim'])
p.add_argument('--fontsize',**GLOSSARY['fontsize'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_vector_view)

# STRAIN-VIEW
#####################################################################
p = subs.add_parser('strain-view',
  usage='pygeons strain-vew STR STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Runs the PyGeoNS Interactive Strain Viewer. This function takes two
data files, which specify the deformation gradients, as arguments.''')
p.add_argument('xdiff_file',**GLOSSARY['xdiff_file'])
p.add_argument('ydiff_file',**GLOSSARY['ydiff_file'])
p.add_argument('--scale',**GLOSSARY['scale'])
p.add_argument('--key-magnitude',**GLOSSARY['key_magnitude'])
p.add_argument('--key-position',**GLOSSARY['key_position'])
p.add_argument('--compression-color',**GLOSSARY['compression_color'])
p.add_argument('--extension-color',**GLOSSARY['extension_color'])
p.add_argument('--vertices',**GLOSSARY['vertices'])
p.add_argument('--alpha',**GLOSSARY['alpha'])
p.add_argument('--snr-mask',**GLOSSARY['snr_mask'])
p.add_argument('--ts-title',**GLOSSARY['ts_title'])
p.add_argument('--map-resolution',**GLOSSARY['map_resolution'])
p.add_argument('--map-title',**GLOSSARY['map_title'])
p.add_argument('--map-xlim',**GLOSSARY['map_xlim'])
p.add_argument('--map-ylim',**GLOSSARY['map_ylim'])
p.add_argument('--fontsize',**GLOSSARY['fontsize'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_strain_view)

# CLEAN
#####################################################################
p = subs.add_parser('clean',
  usage='pygeons clean STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Runs the PyGeoNS interactive cleaner which is used to remove jumps and 
outliers.''')
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('--input-edits-file',**GLOSSARY['input_edits_file'])
p.add_argument('--no-display',**GLOSSARY['no_display'])
p.add_argument('--colors',**GLOSSARY['colors'])
p.add_argument('--line-styles',**GLOSSARY['line_styles'])
p.add_argument('--error-styles',**GLOSSARY['error_styles'])
p.add_argument('--line-markers',**GLOSSARY['line_markers'])
p.add_argument('--quiver-scale',**GLOSSARY['quiver_scale'])
p.add_argument('--quiver-key-length',**GLOSSARY['quiver_key_length'])
p.add_argument('--quiver-key-pos',**GLOSSARY['quiver_key_pos'])
p.add_argument('--scatter-size',**GLOSSARY['scatter_size'])
p.add_argument('--image-clim',**GLOSSARY['image_clim'])
p.add_argument('--image-cmap',**GLOSSARY['image_cmap'])
p.add_argument('--image-resolution',**GLOSSARY['image_resolution'])
p.add_argument('--ts-title',**GLOSSARY['ts_title'])
p.add_argument('--map-resolution',**GLOSSARY['map_resolution'])
p.add_argument('--map-title',**GLOSSARY['map_title'])
p.add_argument('--map-xlim',**GLOSSARY['map_xlim'])
p.add_argument('--map-ylim',**GLOSSARY['map_ylim'])
p.add_argument('--fontsize',**GLOSSARY['fontsize'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_clean)

# CROP
#####################################################################
p = subs.add_parser('crop',
  usage='pygeons crop STR [options]',
  description=
'''Limits the spatial and temporal extent of the dataset. The dates
contained in the resulting dataset will be each day ranging from
*start_date* to *end_date*. The stations in the resulting datasets
will be within the bounds set by *min/max_lon/lat*. Unlike for
*pygeons-clean*, this function removes the dates and stations from the
datset, rather than masking them.
''')  
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('--start-date',**GLOSSARY['start_date'])
p.add_argument('--stop-date',**GLOSSARY['stop_date'])
p.add_argument('--stations',**GLOSSARY['stations'])
p.add_argument('--min-lat',**GLOSSARY['min_lat'])
p.add_argument('--max-lat',**GLOSSARY['max_lat'])
p.add_argument('--min-lon',**GLOSSARY['min_lon'])
p.add_argument('--max-lon',**GLOSSARY['max_lon'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_crop)

# MERGE
#####################################################################
p = subs.add_parser('merge',
  usage='pygeons merge STR [options]',
  description=
'''Merges datasets.
''')  
p.add_argument('input_files',**GLOSSARY['input_files'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_merge)

# FIT
#####################################################################
p = subs.add_parser('fit',
  usage='pygeons fit STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Returns the conditioned Gaussian process''')
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('--network-model',**GLOSSARY['network_model'])
p.add_argument('--network-params',**GLOSSARY['network_params'])
p.add_argument('--station-model',**GLOSSARY['station_model'])
p.add_argument('--station-params',**GLOSSARY['station_params'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_fit)

# AUTOCLEAN
#####################################################################
p = subs.add_parser('autoclean',
  usage='pygeons autoclean STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Automatically removes outliers with a data editing algorithm''')
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('--network-model',**GLOSSARY['network_model'])
p.add_argument('--network-params',**GLOSSARY['network_params'])
p.add_argument('--station-model',**GLOSSARY['station_model'])
p.add_argument('--station-params',**GLOSSARY['station_params'])
p.add_argument('-t','--outlier-tol',**GLOSSARY['outlier_tol'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_autoclean)

# REML
#####################################################################
p = subs.add_parser('reml',
  usage='pygeons reml STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Finds the most likely hyperparameters''')
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('--network-model',**GLOSSARY['network_model'])
p.add_argument('--network-params',**GLOSSARY['network_params'])
p.add_argument('--network-fix',**GLOSSARY['network_fix'])
p.add_argument('--station-model',**GLOSSARY['station_model'])
p.add_argument('--station-params',**GLOSSARY['station_params'])
p.add_argument('--station-fix',**GLOSSARY['station_fix'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_reml)

# STRAIN
#####################################################################
p = subs.add_parser('strain',
  usage='pygeons reml STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Calculates time dependent strain''')
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('--network-prior-model',**GLOSSARY['network_prior_model'])
p.add_argument('--network-prior-params',**GLOSSARY['network_prior_params'])
p.add_argument('--network-noise-model',**GLOSSARY['network_noise_model'])
p.add_argument('--network-noise-params',**GLOSSARY['network_noise_params'])
p.add_argument('--station-noise-model',**GLOSSARY['station_noise_model'])
p.add_argument('--station-noise-params',**GLOSSARY['station_noise_params'])
p.add_argument('--no-rate',**GLOSSARY['no_rate'])
p.add_argument('--no-vertical',**GLOSSARY['no_vertical'])
p.add_argument('--positions',**GLOSSARY['positions'])
p.add_argument('--positions-file',**GLOSSARY['positions_file'])
p.add_argument('--start-date',**GLOSSARY['start_date'])
p.add_argument('--stop-date',**GLOSSARY['stop_date'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_strain)

## PARSE ARGS AND RUN SUB-ROUTINE
#####################################################################
kwargs = vars(main.parse_args())
# toss out Nones and let the lower level functions determine the
# defaults
for k in kwargs.keys():
  if kwargs[k] is None:
    kwargs.pop(k)  

func = kwargs.pop('func')
verbose = kwargs.pop('verbose')
logging.basicConfig(level=30-10*verbose)
logging.captureWarnings(True)
func(**kwargs)
