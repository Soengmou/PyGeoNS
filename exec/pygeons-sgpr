#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import logging
import numpy as np
from pygeons import *

def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser(
  usage='%(prog)s STR FLOAT FLOAT [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Spatially smoothes or differentiates a displacement or velocity
dataset. It is assumed that the deformation at each epoch can be
described as the sum of:

  (1) a Gaussian process with zero mean, and a squared-exponential
      covariance function, 

        cov(x,x') = a² exp(-|x - x'|²/b²),
      
      where *a* and *b* are user-specified hyperparameters controlling
      the standard deviation and the characteristic length-scale,
      respectively.
  
  (2) an unknown polynomial with a user specified order.
  
  (3) Uncorrelated noise described by the formal data uncertainties.    
  
We consider (1) and (2) to be signal which we want to recover. This
function requires the user to specify the name of the data file and
the two hyperparameters for (1).
'''
)
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('prior',**GLOSSARY['s_prior'])
p.add_argument('--order',**GLOSSARY['order'])
p.add_argument('--diff',**GLOSSARY['s_diff'])
p.add_argument('--procs',**GLOSSARY['procs'])
p.add_argument('-t','--outlier_tol',**GLOSSARY['outlier_tol'])
p.add_argument('-s','--return_sample',**GLOSSARY['return_sample'])
p.add_argument('-p','--positions',**GLOSSARY['positions'])
p.add_argument('-o','--output_file',**GLOSSARY['output_file'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p = vars(p.parse_args())

verbose = p.pop('verbose')
logging.basicConfig(level=30-10*verbose)
input_file = p.pop('input_file')
output_file = p.pop('output_file')
# swap positions from a file name to numpy arrays
if p['positions'] is not None:
  pos = np.loadtxt(p['positions'],dtype=str)
  # pos = id,longitude,latitude
  pos = pos[:,0],pos[:,1].astype(float),pos[:,2].astype(float)
  p['positions'] = pos
    
# throw out any Nones and let the lower level functions determine the 
# defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

if output_file is None:
  output_file = change_extension(input_file,'sgpr.h5')

data_dict = dict_from_hdf5(input_file)
out_dict = pygeons_sgpr(data_dict,**p)
hdf5_from_dict(output_file,out_dict)
