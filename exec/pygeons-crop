#!/usr/bin/env python
import argparse
import logging
from pygeons import *
  
def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser(
  description=
''' 
Limits the spatial and temporal extent of the dataset. The dates 
contained in the resulting dataset will be each day ranging from 
*start_date* to *end_date*. The stations in the resulting datasets 
will be within the bounds set by *min/max_lon/lat*. Unlike for 
*pygeons-clean*, this function removes the dates and stations from the 
datset, rather than masking the out of bounds data.

''')
  
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('-o','--output_file',**GLOSSARY['output_file'])
p.add_argument('--start_date',**GLOSSARY['start_date'])
p.add_argument('--stop_date',**GLOSSARY['stop_date'])
p.add_argument('--min_lat',**GLOSSARY['min_lat'])
p.add_argument('--max_lat',**GLOSSARY['max_lat'])
p.add_argument('--min_lon',**GLOSSARY['min_lon'])
p.add_argument('--max_lon',**GLOSSARY['max_lon'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p = vars(p.parse_args())

verbose = p.pop('verbose')
logging.basicConfig(level=30 - 10*verbose)
input_file = p.pop('input_file')
output_file = p.pop('output_file')
# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

if output_file is None:
  output_file = change_extension(input_file,'crop.h5')

data_dict = dict_from_hdf5(input_file)
out_dict = pygeons_crop(data_dict,**p)
hdf5_from_dict(output_file,out_dict)
