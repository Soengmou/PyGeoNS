#!/usr/bin/env python
import argparse
import json
import sys
import os
import pygeons.ioconv
import pygeons.interface
import logging

p = argparse.ArgumentParser()
p.add_argument('input_file',type=str,
               help='''input date file. Can either be a PBO csv file, a PBO 
                       pos file, or a HDF5 file. The file type is 
                       inferred from the extension. ".hdf", ".h5", 
                       ".hdf5", ".he5" are interpretted as HDF5, 
                       ".pos" is interpretted as PBO pos, anything 
                       else is assumed to be a PBO csv file.''')
p.add_argument('output_file',type=str,
               help='''output date file. The output file type is 
                       inferred from the extension. Currently, can 
                       only output to HDF5 files or PBO csv files.''')
p.add_argument('-v','--verbose',action='count',default=0,
               help='''controls verbosity''')
               
p = vars(p.parse_args())

# set logger
if p['verbose'] == 0:
  logging.basicConfig(level=logging.WARNING)
elif p['verbose'] == 1:
  logging.basicConfig(level=logging.INFO)
else:
  logging.basicConfig(level=logging.DEBUG)

input_file = p['input_file']
output_file = p['output_file']

data_dict = pygeons.ioconv.dict_from_file(input_file)
pygeons.ioconv.file_from_dict(output_file,data_dict)   

# check to see if there is an associated pert directory
input_pert_dir = '.'.join(input_file.split('.')[:-1] + ['pert'])
output_pert_dir = '.'.join(output_file.split('.')[:-1] + ['pert'])

if os.path.exists(input_pert_dir):
  # make output perturbation directory
  if not os.path.exists(output_pert_dir):
    os.mkdir(output_pert_dir)

  input_pert_files = os.listdir(input_pert_dir)
  input_pert_paths = ['/'.join([input_pert_dir,f]) for f in input_pert_files]
  output_pert_paths = ['/'.join([output_pert_dir,f]) for f in input_pert_files]

  for fin,fout in zip(input_pert_paths,output_pert_paths):
    data_dict = pygeons.ioconv.dict_from_file(fin)
    pygeons.ioconv.file_from_dict(fout,data_dict)

