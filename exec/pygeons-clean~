#!/usr/bin/env python
import argparse
import logging
from pygeons import *

def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])    

p = argparse.ArgumentParser(
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
''' 
Runs the PyGeoNS interactive cleaner which is used to remove jumps and 
outliers.

'''
)

p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('-o','--output_file',**GLOSSARY['output_file'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.add_argument('--color_cycle',**GLOSSARY['color_cycle'])
p.add_argument('--resolution',**GLOSSARY['resolution'])
p.add_argument('--quiver_scale',**GLOSSARY['quiver_scale'])
p.add_argument('--quiver_key_length',**GLOSSARY['quiver_key_length'])
p.add_argument('--quiver_key_pos',**GLOSSARY['quiver_key_pos'])
p.add_argument('--scatter_size',**GLOSSARY['scatter_size'])
p.add_argument('--image_clim',**GLOSSARY['image_clim'])
p.add_argument('--image_cmap',**GLOSSARY['image_cmap'])
p.add_argument('--image_array_size',**GLOSSARY['image_array_size'])
p.add_argument('--ts_title',**GLOSSARY['ts_title'])
p.add_argument('--map_title',**GLOSSARY['map_title'])
p.add_argument('--map_xlim',**GLOSSARY['map_xlim'])
p.add_argument('--map_ylim',**GLOSSARY['map_ylim'])
p.add_argument('--fontsize',**GLOSSARY['fontsize'])
p.add_argument('--break_lons',**GLOSSARY['break_lons'])
p.add_argument('--break_lats',**GLOSSARY['break_lats'])
p.add_argument('--break_conn',**GLOSSARY['break_conn'])
p = vars(p.parse_args())

verbose = p.pop('verbose')
input_file = p.pop('input_file')
output_file = p.pop('output_file')
# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys(): 
  if p[k] is None: 
    p.pop(k)

logging.basicConfig(level=30-10*verbose)

if output_file is None:
  output_file = change_extension(input_file,'clean.h5')

data_dict = dict_from_hdf5(input_file) 
out_dict = pygeons_clean(data_dict,**p)
hdf5_from_dict(output_file,out_dict)
