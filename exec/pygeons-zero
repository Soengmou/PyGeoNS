#!/usr/bin/env python
import argparse
import json
import sys
import pygeons.ioconv
import pygeons.interface
import logging

p = argparse.ArgumentParser(
  description='''Estimates and removes the displacements at the 
                 indicated time. The offset is calculated with a 
                 weighted mean centered about the *zero_time*. 
                 *radius* specifies the temporal extent of data used 
                 in the weighted mean''')                 
p.add_argument('input_file',type=str,
               help='''Input date file. Can either be a PBO csv file, a PBO 
                       pos file, or a HDF5 file. The file type is 
                       inferred from its extension. ".hdf", ".h5", 
                       ".hdf5", ".he5" are interpretted as HDF5, 
                       ".pos" is interpretted as PBO pos, anything 
                       else is assumed to be a PBO csv file.''')                       
p.add_argument('zero_time',type=float,
               help='''Zero displacements at this time which is specified 
                       in decimal years''')
p.add_argument('radius',type=float,
               help='''Length of time before and after *zero_time* used in computing 
                       the offsets''')
p.add_argument('--output_file',type=str,
               help='''If not provided then the input file extension 
                       is removed and replaced with smooth.h5. The
                       output file type is inferred from the 
                       extension. Currently, can only output to HDF5 
                       files or PBO csv files.''')
p.add_argument('-v','--verbose',action='count',default=0,
               help='''Controls verbosity''')
p.add_argument('--cut_times',nargs='+',type=float,
               help='''List of time discontinuities in decimal year''')
p.add_argument('--cut_dates',nargs='+',type=str,
               help='''List of time discontinuities in YYYY-MM-DD. These 
                       discontinuities get converted to decimal year 
                       and then appended to *cut_times*''')

               
p = vars(p.parse_args())

# set logger
if p['verbose'] == 0:
  logging.basicConfig(level=logging.WARNING)
elif p['verbose'] == 1:
  logging.basicConfig(level=logging.INFO)
else:
  logging.basicConfig(level=logging.DEBUG)

input_file = p['input_file']
output_file = p['output_file']
if output_file is None:
  input_file_split = input_file.split('.')
  output_file_split = input_file_split[:-1] + ['zero.h5']
  output_file = '.'.join(output_file_split)

data_dict = pygeons.ioconv.dict_from_file(input_file)
out_dict = pygeons.interface.zero(
             data_dict,
             p['zero_time'],
             p['radius'],
             cut_times=p['cut_times'],
             cut_dates=p['cut_dates'])
pygeons.ioconv.file_from_dict(output_file,out_dict)                         
