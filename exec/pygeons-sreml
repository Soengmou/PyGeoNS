#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import logging
from pygeons import *

def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser(
  usage='%(prog)s STR FLOAT FLOAT [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=

'''Estimates the hyperparameters characterizing the spatial covariance
of the deformation for each day. This is done using the Restricted
Maximum Likelihood (REML) method. The REML method treats the observed
deformation, which can be displacements or velocities, as realizations
of a stochastic function. This stochastic function can be described as
the sum of:

  (1) an unknown polynomial with a user specified order.
  
  (2) Uncorrelated noise described by the formal data uncertainties.    
  
  (3) a Gaussian process with zero mean, and a covariance function
      described by one of the following
      
      (SE)      cov(x,x';a,b) = 

                a² exp(-|x - x'|²/b²),
                 
      (FOGM)    cov(x,x';c,d) = 

                c²/(4 π d) exp(-2 π d |x - x'|),
      
      (SE+FOGM) cov(x,x';a,b,c,d) = 
      
                a² exp(-|x - x'|²/b²) +

                c²/(4 π d) exp(-2 π d |x - x'|),
      
      where *a*, *b*, *c*, and *d* are unknown hyperparameters. If the
      input dataset describes displacements then the hyperparameter
      units are mm, km, mm/km^0.5, and 1/km, respectively. If the
      input dataset describes velocities then the hyperparameter units
      are mm/yr, km, (mm/yr)/km^0.5, and 1/km, respectively.

The REML method finds the hyperparameters that maximize the
probability of realizing the data from the stochastic function. The
optimal hyperparameters for each day are written to an output text
file.
'''
)
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('model',**GLOSSARY['model'])
p.add_argument('params',**GLOSSARY['params'])
p.add_argument('--fix',**GLOSSARY['fix'])
p.add_argument('--procs',**GLOSSARY['procs'])
p.add_argument('-p','--parameters_file',**GLOSSARY['parameters_file'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p = vars(p.parse_args())

verbose = p.pop('verbose')
logging.basicConfig(level=30-10*verbose)
input_file = p.pop('input_file')
# throw out any Nones and let the lower level functions determine the
# defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

data_dict = dict_from_hdf5(input_file)
pygeons_sreml(data_dict,**p)
