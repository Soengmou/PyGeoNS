#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import logging
from pygeons import *

def change_extension(f,ext):
  return '.'.join(f.split('.')[:-1] + [ext])

p = argparse.ArgumentParser(
  usage='%(prog)s STR STR FLOAT [FLOAT ...] [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Estimates the hyperparameters characterizing the temporal
covariance of displacements for each station. This is done using the
Restricted Maximum Likelihood (REML) method. The REML method treats
the observed displacements as realizations of a stochastic function.
This stochastic function can be described as the sum of:

  (1) an unknown polynomial with a user specified order.
  
  (2) sinusoids with annual and semiannual frequencies and unknown
      amplitudes,

  (3) uncorrelated noise described by the formal data uncertainties,

  (4) a Gaussian process with zero mean, and a covariance function
      described by one of the following
      
      (SE)      cov(t,t';a,b) = 

                a² exp(-|t - t'|²/b²),
                 
      (FOGM)    cov(t,t';c,d) = 

                c²/(4 π d) exp(-2 π d |t - t'|),
      
      (SE+FOGM) cov(t,t';a,b,c,d) = 
      
                a² exp(-|t - t'|²/b²) +

                c²/(4 π d) exp(-2 π d |t - t'|),
      
      where *a*, *b*, *c*, and *d* are unknown hyperparameters with
      units of mm, yr, mm/yr^0.5, and 1/yr, respectively.
  
The REML method finds the hyperparameters that maximize the
probability of realizing the data from the stochastic function. The
optimal hyperparameters for each station are written to an output text
file.
'''
)
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('model',**GLOSSARY['model'])
p.add_argument('params',**GLOSSARY['params'])
p.add_argument('--fix',**GLOSSARY['fix'])
p.add_argument('--order',**GLOSSARY['order'])
p.add_argument('--procs',**GLOSSARY['procs'])
p.add_argument('--no-annual',dest='annual',action='store_false',**GLOSSARY['annual'])
p.add_argument('--no-semiannual',dest='semiannual',action='store_false',**GLOSSARY['semiannual'])
p.add_argument('-p','--parameters_file',**GLOSSARY['parameters_file'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p = vars(p.parse_args())

verbose = p.pop('verbose')
logging.basicConfig(level=30-10*verbose)
input_file = p.pop('input_file')
# throw out any Nones and let the lower level functions determine the defaults
for k in p.keys():
  if p[k] is None:
    p.pop(k)

data_dict = dict_from_hdf5(input_file)
pygeons_treml(data_dict,**p)
