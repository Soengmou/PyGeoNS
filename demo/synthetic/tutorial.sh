#!/bin/bash
### PyGeoNS Tutorial

## Viewing and Differentiating

# This script demonstrates how to use the pygeons executables. It
# works with data generated by the script *write_synthetic.py*. The
# data file is named *synthetic.csv* and it should be in the current
# directory. Run *write_synthetic.py* if the data file does not exist.
# The *synthetic.csv* file is intended to closely resemble the UNAVCO
# csv time series file format. Indeed, PyGeoNS is able to read in
# UNAVCOs csv and pos file formats with minimal effort by the user.
# See the *demo/parkfield* directory for a demonstration of using
# PyGeoNS with real data

# This command will plot the synthetic data with the PyGeoNS
# Interactive Viewer (PIV). Instructions on how to use the viewer will
# print to the screen. Make sure that one of the two figures is the
# active window and then you can use the arrow keys to scroll through
# stations and time epochs

#pygeons-view data/synthetic.csv

# This script will wait until the figure windows have been closed.

# This is a pretty large data set and we should downsample it to make
# this tutorial more wieldly. The following command downsamples
# synthetic.csv from a daily to weekly sample period and saves the new
# dataset to synthetic.downsample.csv. The new values are computed
# with a weighted mean over the new sampling period.

#pygeons-downsample data/synthetic.csv 7 --output_file data/synthetic.downsample.csv

# Lets look at the new downsampled dataset. This time we will add some
# plotting arguments. This changes the colormap to viridis, which is
# soon to be the default python color map. I am also fixing the
# colormap range from -100 to 100, as opposed to letting it update
# dynamically.

#pygeons-view data/synthetic.downsample.csv --image_cmap viridis --image_clim -100.0 100.0

# All of the plotting arguments are listed in the help documentation
# for pygeons.view.view.  You can also change the plotting arguments
# during the interactive session by hitting the enter key while on of
# the figures is an active window. This will disable figure
# interactivity and then a command line prompt will guide you through
# changing the plotting parameters.

# One fantastic feature of pygeons is its ability to take arbitary
# spatial and temporal derivatives of a geodetic dataset. Lets start
# with the least exciting time differentiation example. We will
# compute the first derivative of our downsampled dataset

#pygeons-diff data/synthetic.downsample.csv --dt 1 --output_file data/synthetic.downsample.diff.h5

# Note that we added a .h5 extension to the output file. Pygeons
# recognizes the standard hdf5 extensions and writes to a hdf5 file
# rather than a csv file. Likewise, pygeons can infer the file type of
# input data. It is generally a better idea to perform intermediate
# task with HDF5 files because reading/writing is much faster. You
# also have no risk of losing data when outputting to hdf5 files
# because there is a seamless transition between pygeons internal data
# structures and the hdf5 file. With csv files there is a risk of
# losing data because there is some amount of rounding when going from
# decimal years to dates and also because floats need to be rounded
# during conversion to a string.

# view the differentiated data along with the undifferentiated data.
# When plotting multiple datasets, all the data sets must have the
# same stations and the same time epochs. This is checked during the
# call to view and it will raise an error if data dimensions are
# inconsistent

#pygeons-view data/synthetic.downsample.csv data/synthetic.downsample.diff.h5

# lets differentiate the velocities along the x direction

#pygeons-diff data/synthetic.downsample.diff.h5 --dx 1

# We did not specify an output location and pygeons will output to a
# file with the same name as the input except the extension will be
# been replaced with *.diff.h5*. So the new file will be called
# synthetic.downsample.diff.diff.h5

# Lets view the x derivative of velocities and compare them to the
# velocities.

#pygeons-view data/synthetic.downsample.diff.h5 data/synthetic.downsample.diff.diff.h5

# Note that the x derivative is several orders of magnitude smaller
# than the undifferentiated dataset. This is because x is in units of
# meters and the deformation wavelength is on the order of hundreds of
# thousands of meters.  Keep this is mind when storing data and
# remember that the csv file only prints out to five decimal places.
# In the near future I will try to give the option to change units.

## Cleaning and Smoothing

# We now work with synthetic data which has had noise added to it.
# PyGeoNS provides two powerful tools for cutting through noise,
# pygeons-smooth and pygeons-clean. The former is the cornerstone of
# the PyGeoNS software suite and the latter invokes the PyGeoNS
# Interactive Cleaner (PIC). The noisy dataset should have been created by
# *write_synthetic.py* and the data file is called
# *synthetic.noise.csv*. Lets now view the noisy data with the PIC

#pygeons-clean data/synthetic.noise.csv

# The PIC offers all the features of the PIV and it allows you to
# interactively remove outliers and jumps in the time series. Outliers
# can be removed by holding down the *d* key and then clicking and
# dragging over the outliers on the time series figure. Make sure that
# one of the PIC figures is the active window. After removing an
# outlier, the changes will appear in the data set labeled *edited
# data*. If you are happy with the edit then you can hit *k* to keep
# the edits. Once hitting *k* the outliers should be removed in both
# the *edited* and *kept* data set. If you want to discard an edit
# then hit *u*.

# Removing jumps is similar to removing outliers. hold down the *j*
# key, click on the jump in the time series figure, and drag the
# cursor over the time interval used to estimate the jump.  Once you
# release the mouse the jump will be remove from the time series. hit
# *k* to keep the changes or *u* to discard.

# Note that nothing is save to the disk until you close both the
# figures, thereby exiting the PIC. Saving to the disk is the final
# step in the pygeons-clean function. If the output file is not
# specified then the output file has the same name as the input but
# with a *.clean.h5* extension. You may also hit *w* while the PIC is
# running and a command line prompt will guide you through saving to
# the disk.

# smooth the cleaned data
#pygeons-smooth data/synthetic.noise.clean.h5 --length_scale 100000

#pygeons-view data/synthetic.csv data/synthetic.noise.clean.h5 data/synthetic.noise.clean.smooth.h5 --data_set_names true noisy smooth

# smooth the clean data but do not allow smoothing across the middle
pygeons-smooth data/synthetic.noise.clean.h5 --length_scale 1000000 \
  --cut_endpoint1_lons -80 --cut_endpoint1_lats 43 \
  --cut_endpoint2_lons -90 --cut_endpoint2_lats 43 -vv

pygeons-view data/synthetic.csv data/synthetic.noise.clean.h5 data/synthetic.noise.clean.smooth.h5 --data_set_names true noisy smooth -vv


